#!/usr/bin/env ruby
# frozen_string_literal: true

GEM_ROOT = File.expand_path("..", __dir__)
LIBRARY_PATH = File.join(GEM_ROOT, "lib")
$LOAD_PATH.unshift(LIBRARY_PATH)

DEBUG = false

if DEBUG
  puts "GEM_ROOT: #{GEM_ROOT}"
  puts "LIBRARY_PATH: #{LIBRARY_PATH}"
  puts "$LOAD_PATH: #{$LOAD_PATH}"
end

require "bundler/setup"

require "active_support/core_ext/object/blank"
require "jira/auto/tool"
require "jira/auto/tool/board_controller/options"
require "jira/auto/tool/config/options"
require "jira/auto/tool/options"
require "jira/auto/tool/performer/options"
require "jira/auto/tool/project/options"
require "jira/auto/tool/sprint_controller/options"
require "jira/auto/tool/team_sprint_prefix_mapper/options"

require "optparse"
require "optparse/date"

tool = Jira::Auto::Tool.new

option_parser = OptionParser.new do |parser|
  Jira::Auto::Tool::Options.add(tool, parser)
  Jira::Auto::Tool::BoardController::Options.add(tool, parser)
  Jira::Auto::Tool::Config::Options.add(tool, parser)
  Jira::Auto::Tool::Project::Options.add(tool, parser)
  Jira::Auto::Tool::Performer::Options.add(tool, parser)
  Jira::Auto::Tool::SprintController::Options.add(tool, parser)
  Jira::Auto::Tool::TeamSprintPrefixMapper::Options.add(tool, parser)
end

begin
  option_parser.parse!
rescue StandardError => e
  error_message = <<~EOERROR_MESSAGE
    #{e.class}: #{e.message}
    #{e.backtrace.join("\n")}
  EOERROR_MESSAGE

  log.error { error_message }
  warn error_message

  exit 1
end
